import tkinter
from tkinter import filedialog
import os
import difflib
import sys
import base64

from PyQt5 import QtWidgets, QtGui
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtWebEngineWidgets import *

# 生成LOGO
LOGO_URI = './favicon_t.jpg'
IMG = ''

if not os.path.isfile(LOGO_URI):
    imgdata = base64.b64decode(IMG)
    file = open(LOGO_URI, 'wb')
    file.write(imgdata)
    file.close()

root = tkinter.Tk()  # 创建一个Tkinter.Tk()实例
root.withdraw()  # 将Tkinter.Tk()实例隐藏
default_dir = r"文件路径"
file_path_first = filedialog.askopenfilename(title=u'选择文件', initialdir=(os.path.expanduser(default_dir)))
print(file_path_first)
file_path_second = filedialog.askopenfilename(title=u'选择文件', initialdir=(os.path.expanduser(default_dir)))
print(file_path_second)


def readfile(filename):  # 文件读取分隔函数
    try:
        fileHandle = open(filename, 'r', encoding='utf-8')
        text = fileHandle.read().splitlines()  # 读取后以行进行分隔
        fileHandle.close()
        return text
    except IOError as error:
        sys.exit()


text1_line = readfile(file_path_first)
text2_line = readfile(file_path_second)
d = difflib.HtmlDiff()
diffContent = d.make_file(text1_line, text2_line)


class UI(QMainWindow):
    def __init__(self, urlcontent):
        global LOGO_URI
        super(UI, self).__init__()
        self.setWindowTitle('Windows Diffoo 文件对比')
        self.resize(1024, 768)
        self.setWindowIcon(QtGui.QIcon(LOGO_URI))
        self.tabs = QtWidgets.QTabWidget()
        self.tabs.setDocumentMode(True)
        self.tabs.setTabsClosable(True)
        self.tabs_layout = QtWidgets.QGridLayout()
        self.tabs.setLayout(self.tabs_layout)
        self.url_edit = QtWidgets.QLineEdit()

        self.browser = QWebEngineView()

        # 给浏览器内核设置html内容
        self.browser.setHtml(urlcontent)
        self.tabs_layout.addWidget(self.browser)
        self.browser.loadFinished.connect(lambda: self.tabs.setTabText(0, self.browser.page().title()))
        self.setCentralWidget(self.tabs)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    gui = UI(diffContent)
    gui.show()
    sys.exit(app.exec_())